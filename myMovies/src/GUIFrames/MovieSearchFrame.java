
package GUIFrames;

import java.awt.event.*;
import java.text.ParseException;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.*;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import model.*;
import myMovies_new.DBUtils;
import myMovies_new.GuiUtils;


public class MovieSearchFrame extends javax.swing.JFrame {
    
    MainFrame mainMenu;
    JFrame previousFrame ;
    ArrayList<String> favoriteList;
    EntityManager em;
    //Ημερομηνία που εισάγει ο χρήστης για την αναζήτηση Movie
    String movieReleaseDate=null;  
    //αποθηκευση επιλογης Movie χρηστη απο τον πινακα με τις Movies
    String selectedMovieNameFromjTable; 
    //αποθηκευση επιλογης FavoriteList χρηστη απο το ComboBox με τις FavoriteLists
    String selectedListNameFromjComboBox;
    //"μετρητης" για να γινει η ερωτηση προσθηκης Movie σε FavoriteList σωστα σε καθε περιπτωση 
    int counterToChangeMovieListProperly; 
    //αν εχει επιλεγει καποια Movie απο τον πινακα με τις Movies,
    //γινεται true για να ενεργοποιηθουν η εισαγωγη στην FavoriteList και η διαγραφη απο FavoriteList
    boolean movieFromComboBoxChoosed = false;  
    //αντικειμενο τυπου Movie που αποθηκευεται η επιλογη του χρηστη απο τον πινακα με τις Moviea
    Movie movieFromSelectedMovieNameFromjTable = new Movie();      
    //αντικειμενο τυπου FavoriteList που ανηκει η Movie που επελεξε ο χρηστης απο τον πινακα με τις Movies
    FavoriteList favoriteListOfChoosedMovie = new FavoriteList(); 
    //αντικειμενο τυπου FavoriteList που αποθηκευεται η επιλογη του χρηστη απο το ComboBox με τις λιστες
    FavoriteList favoriteListFromSelectedListNameFromComboBox = new FavoriteList();     
    
    
    public void goBack() {
    GuiUtils.disposeAndOpenUpperFrame(this, mainMenu);
    }

    public MovieSearchFrame(MainFrame mainMenu,JFrame previousFrame, ArrayList<String> favoriteList) {
        
        this.mainMenu = mainMenu;
        this.favoriteList = favoriteList;
        this.previousFrame = previousFrame;
        
        try{
        EntityManagerFactory emf = Persistence.createEntityManagerFactory("myMovies_newPU");
        em = emf.createEntityManager();
        previousFrame.dispose();

        initComponents();
        this.setLocationRelativeTo(null);
        this.setTitle("myMovies_new - Movie Search");
        this.setVisible(true);
        
        MovieKindComboBox.setSelectedIndex(-1);          //η λίστα με τις Movies δεν έχει προεπιλογή
        SearchMovieCriteriaJPanel.setVisible(true);
        SeachResultsTableJPanel.setVisible(false);
        
        //exitListener που ζητάει επιβεβαίωση για έξοδο
        this.addWindowListener(exitListener);  
        }catch(Exception ex){
             JOptionPane.showMessageDialog(null, ex.getMessage(), "Πρόβλημα με τη βάση...", JOptionPane.ERROR_MESSAGE);
        }
        
        
        //εισαγωγη ειδων Movies στην πτυσσομενη λιστα για τα ειδη των Movies 
            ArrayList<String> genreNamesList = new ArrayList<>();
            try {
                genreNamesList = DBUtils.getGenresNamesList();
            }catch (Exception ex){
                Logger.getLogger(MovieSearchFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        
            DefaultComboBoxModel<String> aModel = new DefaultComboBoxModel<>();
            for(int i=0; i<genreNamesList.size(); i++){
                aModel.addElement(genreNamesList.get(i));
            }
            MovieKindComboBox.setModel(aModel);
            MovieKindComboBox.setSelectedIndex(-1);         //η λίστα με τις Movies δεν έχει προεπιλογή
        //τελος διαδικασιας εισαγωγης ειδων Movies
    }
    
    WindowListener exitListener = new WindowAdapter() {
        @Override
        public void windowClosing(WindowEvent e) {
            GuiUtils.exitProgram();
        }
    };
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        myMovies_newPUEntityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("myMovies_newPU").createEntityManager();
        genreQuery = java.beans.Beans.isDesignTime() ? null : myMovies_newPUEntityManager.createQuery("SELECT g FROM Genre g");
        genreList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : genreQuery.getResultList();
        genreQuery1 = java.beans.Beans.isDesignTime() ? null : myMovies_newPUEntityManager.createQuery("SELECT g FROM Genre g");
        genreList1 = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : genreQuery1.getResultList();
        favoriteListQuery = java.beans.Beans.isDesignTime() ? null : myMovies_newPUEntityManager.createQuery("SELECT f FROM FavoriteList f");
        favoriteListList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : favoriteListQuery.getResultList();
        SearchButton = new javax.swing.JButton();
        SearchMovieCriteriaJPanel = new javax.swing.JPanel();
        MovieKindComboBox = new javax.swing.JComboBox<>();
        ReleaseDateTextField = new javax.swing.JTextField();
        ClearCriteriaButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        SeachResultsTableJPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        searchedMoviesjTable = new javax.swing.JTable();
        AddToListComboBox = new javax.swing.JComboBox<>();
        AddToListLabel = new javax.swing.JLabel();
        DeleteFromListButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        InitialScreeenMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        FavouriteListManagementMenuItem = new javax.swing.JMenuItem();
        StatiticsMenuItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        ExitMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        SearchButton.setText("Search");
        SearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchButtonActionPerformed(evt);
            }
        });

        MovieKindComboBox.setModel(MovieKindComboBox.getModel());
        MovieKindComboBox.setToolTipText("");
        MovieKindComboBox.setSelectedIndex(-1);

        ReleaseDateTextField.setText("Release Date");
        ReleaseDateTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReleaseDateTextFieldActionPerformed(evt);
            }
        });

        ClearCriteriaButton.setText("Clear Criteria");
        ClearCriteriaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearCriteriaButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Enter required to get value");

        javax.swing.GroupLayout SearchMovieCriteriaJPanelLayout = new javax.swing.GroupLayout(SearchMovieCriteriaJPanel);
        SearchMovieCriteriaJPanel.setLayout(SearchMovieCriteriaJPanelLayout);
        SearchMovieCriteriaJPanelLayout.setHorizontalGroup(
            SearchMovieCriteriaJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SearchMovieCriteriaJPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel1))
            .addGroup(SearchMovieCriteriaJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(MovieKindComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 154, Short.MAX_VALUE)
                .addComponent(ReleaseDateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33))
            .addGroup(SearchMovieCriteriaJPanelLayout.createSequentialGroup()
                .addGap(133, 133, 133)
                .addComponent(ClearCriteriaButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        SearchMovieCriteriaJPanelLayout.setVerticalGroup(
            SearchMovieCriteriaJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SearchMovieCriteriaJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(SearchMovieCriteriaJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(MovieKindComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ReleaseDateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addComponent(ClearCriteriaButton)
                .addGap(30, 30, 30))
        );

        searchedMoviesjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Movie Title", "Movie Rating", "Movie Description"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Float.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        searchedMoviesjTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchedMoviesjTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(searchedMoviesjTable);
        if (searchedMoviesjTable.getColumnModel().getColumnCount() > 0) {
            searchedMoviesjTable.getColumnModel().getColumn(1).setPreferredWidth(80);
        }

        AddToListComboBox.setModel(AddToListComboBox.getModel());
        AddToListComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                AddToListComboBoxItemStateChanged(evt);
            }
        });

        AddToListLabel.setText("Add to list");

        DeleteFromListButton.setText("Delete from list");
        DeleteFromListButton.setToolTipText("");
        DeleteFromListButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteFromListButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout SeachResultsTableJPanelLayout = new javax.swing.GroupLayout(SeachResultsTableJPanel);
        SeachResultsTableJPanel.setLayout(SeachResultsTableJPanelLayout);
        SeachResultsTableJPanelLayout.setHorizontalGroup(
            SeachResultsTableJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SeachResultsTableJPanelLayout.createSequentialGroup()
                .addContainerGap(111, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(82, 82, 82))
            .addGroup(SeachResultsTableJPanelLayout.createSequentialGroup()
                .addGap(174, 174, 174)
                .addGroup(SeachResultsTableJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(AddToListLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE)
                    .addComponent(AddToListComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(72, 72, 72)
                .addComponent(DeleteFromListButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        SeachResultsTableJPanelLayout.setVerticalGroup(
            SeachResultsTableJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SeachResultsTableJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addComponent(AddToListLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(SeachResultsTableJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AddToListComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DeleteFromListButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jMenu1.setText("myMovies");

        InitialScreeenMenuItem.setText("1. Initial Screen");
        InitialScreeenMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InitialScreeenMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(InitialScreeenMenuItem);
        jMenu1.add(jSeparator1);

        FavouriteListManagementMenuItem.setText("2. Favourite List Management");
        FavouriteListManagementMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FavouriteListManagementMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(FavouriteListManagementMenuItem);

        StatiticsMenuItem.setText("3. Statitics");
        StatiticsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StatiticsMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(StatiticsMenuItem);
        jMenu1.add(jSeparator2);

        ExitMenuItem.setText("4. Exit");
        ExitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(ExitMenuItem);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SearchMovieCriteriaJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(174, 174, 174)
                        .addComponent(SearchButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 96, Short.MAX_VALUE)
                .addComponent(SeachResultsTableJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(SearchMovieCriteriaJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(SearchButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(SeachResultsTableJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //ActionPerformed για τα κουμπιά
    private void InitialScreeenMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InitialScreeenMenuItemActionPerformed
        // TODO add your handling code here:
        goBack();
    }//GEN-LAST:event_InitialScreeenMenuItemActionPerformed

    private void FavouriteListManagementMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FavouriteListManagementMenuItemActionPerformed
        // TODO add your handling code here:
        new FavouriteListFrame(mainMenu, this, favoriteList);
    }//GEN-LAST:event_FavouriteListManagementMenuItemActionPerformed

    private void StatiticsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StatiticsMenuItemActionPerformed
        // TODO add your handling code here:
        new StatiticsFrame(mainMenu, this, favoriteList);
    }//GEN-LAST:event_StatiticsMenuItemActionPerformed

    private void ExitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitMenuItemActionPerformed
        // TODO add your handling code here:
        GuiUtils.exitProgram();
    }//GEN-LAST:event_ExitMenuItemActionPerformed
    
    private void ReleaseDateTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReleaseDateTextFieldActionPerformed
        // TODO add your handling code here:
        SearchMovieCriteriaJPanel.setVisible(true);
        SeachResultsTableJPanel.setVisible(false);
        movieReleaseDate = ReleaseDateTextField.getText();
    }//GEN-LAST:event_ReleaseDateTextFieldActionPerformed

    private void SearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchButtonActionPerformed
        // TODO add your handling code here:
        if (MovieKindComboBox.getSelectedIndex()!=-1 && movieReleaseDate!=null){
            SearchMovieCriteriaJPanel.setVisible(true);
            SeachResultsTableJPanel.setVisible(true);
            //ονομα ειδους Movie που πατησε ο χρηστης
            String selectedGenre = (String) MovieKindComboBox.getSelectedItem();         
            Genre selectedGenreToGetMovies = new Genre();
            
            //βρισκουμε την entity του Genre της Movie που εχει διαλεξει ο χρηστης,
            //για να περαστει σαν εισοδος σε διαδικασια ευρεσης ολων των Movies που εχουν αυτο το Genre
            try {
                selectedGenreToGetMovies = DBUtils.getGenreEntityFromGenreName(selectedGenre);
            } catch (Exception ex) {
                Logger.getLogger(MovieSearchFrame.class.getName()).log(Level.SEVERE, null, ex);
            }

            //λιστα με τις Movies που εχουν Genre και ReleaseDate αυτα που εχει εισαγει ο χρηστης
            List<Movie> selectedMoviesByGenreAndReleaseDate = new ArrayList<>();
            try {
                selectedMoviesByGenreAndReleaseDate = DBUtils.getMoviesEntitiesFromSelectedGenreAndReleaseDate(selectedGenreToGetMovies, movieReleaseDate);
            }catch (ParseException ex){
                Logger.getLogger(MovieSearchFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            //περασμα των Movies που πληρουν τα κριτηρια στον πινακα ή εμφανιση μηνυματος λαθος αν δεν υπαρχουν δεδομενα
            if (selectedMoviesByGenreAndReleaseDate.isEmpty()){
                JOptionPane.showMessageDialog(null, "No movies with the data you entered. Please try again!!");
            }else{
              //βαζω τοσες σειρες οσες ειναι και οι Movies που περιεχονται σε καθε λιστα
              ((DefaultTableModel) searchedMoviesjTable.getModel()).setRowCount(selectedMoviesByGenreAndReleaseDate.size());
        
              for (int rowCounter=0; rowCounter<selectedMoviesByGenreAndReleaseDate.size(); rowCounter++){
                searchedMoviesjTable.setValueAt(selectedMoviesByGenreAndReleaseDate.get(rowCounter).getMovieName(), rowCounter, 0);
                searchedMoviesjTable.setValueAt(selectedMoviesByGenreAndReleaseDate.get(rowCounter).getMovieRating(), rowCounter, 1);
                searchedMoviesjTable.setValueAt(selectedMoviesByGenreAndReleaseDate.get(rowCounter).getMovieOverview(), rowCounter, 2);
                }
              
              //μεθοδος για να μπορει να γινει ταξινομηση βασει της στηλης με το rating των Movies
                TableRowSorter<TableModel> sorter = new TableRowSorter<>(searchedMoviesjTable.getModel());
                searchedMoviesjTable.setRowSorter(sorter);
                List<RowSorter.SortKey> sortKeys = new ArrayList<>();
                int columnIndexToSort = 1;
                sortKeys.add(new RowSorter.SortKey(columnIndexToSort, SortOrder.DESCENDING));
                sorter.setSortKeys(sortKeys);
                sorter.sort();
               //τελος διαδικασιας ταξινομησης βασει στηλης
               
                //εισαγωγη ολων των FavoriteLists αν πρωτα ο χρηστης επιλεξει Movie και εμφανιση FavoriteList που ανηκει
                ArrayList<String> listsNamesList = new ArrayList<>();
                try {
                    listsNamesList = DBUtils.getFavoriteListsNamesList();
                }catch (Exception ex){
                    Logger.getLogger(MovieSearchFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
        
                DefaultComboBoxModel<String> aModel = new DefaultComboBoxModel<>();
                for(int i=0; i<listsNamesList.size(); i++){
                    aModel.addElement(listsNamesList.get(i));
                }
                AddToListComboBox.setModel(aModel);
                AddToListComboBox.setSelectedIndex(-1);         //η λίστα με τις FavorietLists δεν έχει προεπιλογή
                //τελος εισαγωγης ολων των FavoriteLists
            }
        }
        else if(MovieKindComboBox.getSelectedIndex()==(-1) && movieReleaseDate==null){
            JOptionPane.showMessageDialog(null, "You must choose a movie kind and enter release date!!");
        }
        else if(MovieKindComboBox.getSelectedIndex()==(-1)){
            JOptionPane.showMessageDialog(null, "You must choose a movie kind!!");
        } 
        else{
            JOptionPane.showMessageDialog(null, "You must enter release date!!");
        }
    }//GEN-LAST:event_SearchButtonActionPerformed

    private void ClearCriteriaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearCriteriaButtonActionPerformed
        // TODO add your handling code here:
        SearchMovieCriteriaJPanel.setVisible(true);
        SeachResultsTableJPanel.setVisible(false);
        
        MovieKindComboBox.setSelectedIndex(-1);         //η λίστα με τις Movies δεν έχει προεπιλογή
        ReleaseDateTextField.setText(null);             //το πεδιο εχει τιμη null
        movieReleaseDate=null;                          //διαγραφη εισοδου στο πεδιο releaseDate
    }//GEN-LAST:event_ClearCriteriaButtonActionPerformed

    private void DeleteFromListButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteFromListButtonActionPerformed
        // TODO add your handling code here:
        SearchMovieCriteriaJPanel.setVisible(true);
        SeachResultsTableJPanel.setVisible(true);
        
        //αν εχει επιλεγει καποια Movie απο τον πινακα και αυτη η Movie ανηκει σε καποια FavoriteList,
        //ενεργοποιειται το κουμπι διαγραφης της movie απο την FavoriteList
        if (movieFromComboBoxChoosed==true && movieFromSelectedMovieNameFromjTable.getFavoriteListIdFk()!=null){
           int confirm = JOptionPane.showOptionDialog(null, "Delete movie from favourite list?", "Confirmation",
                JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE, null, null, null);
           if(confirm==0){
               AddToListComboBox.setSelectedIndex(-1);          //η λίστα με τις FavorietLists δεν έχει προεπιλογή
               
               //FavoriteList που θα περιεχει την FavoriteList που εχει η Movie που επελεξε ο χρηστης
               FavoriteList listFromMovieChoosed = new FavoriteList();
               listFromMovieChoosed = movieFromSelectedMovieNameFromjTable.getFavoriteListIdFk();
               
               //αφαιρω την επιλεγμενη Movie απο την FavoriteList 
                listFromMovieChoosed.removeMovie(movieFromSelectedMovieNameFromjTable);
                
               //δημιουργια νεας Movie με τα ιδια στοιχεια με αυτη που εχει επιλεξει αυτη ο χρηστης,
               //χωρις ομως να ανηκει σε καποια FavoriteList
                Movie newMovie = new Movie();
                newMovie.setMovieId(movieFromSelectedMovieNameFromjTable.getMovieId());
                newMovie.setMovieName(movieFromSelectedMovieNameFromjTable.getMovieName());
                newMovie.setMovieOverview(movieFromSelectedMovieNameFromjTable.getMovieOverview());
                newMovie.setMovieRating(movieFromSelectedMovieNameFromjTable.getMovieRating());
                newMovie.setMovieReleaseDate(movieFromSelectedMovieNameFromjTable.getMovieReleaseDate());
                newMovie.setGenreIdFk(movieFromSelectedMovieNameFromjTable.getGenreIdFk());
                newMovie.setFavoriteListIdFk(null);
                
                em.getTransaction().begin();
                em.merge(newMovie);                     //συγχωνευση αλλαγων και περασμα στην βαση
                em.getTransaction().commit();
           }
        }
    }//GEN-LAST:event_DeleteFromListButtonActionPerformed
    
    private void searchedMoviesjTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchedMoviesjTableMouseClicked
        // TODO add your handling code here:
        movieFromComboBoxChoosed = true;
        //βρισκω σε ποια στηλη ειναι η επιλεγμενη Movie
        int choosedColumn = searchedMoviesjTable.getSelectedColumn(); 
        //βρισκω σε ποια σειρα ειναι η επιλεγμενη Movie
        int choosedRow = searchedMoviesjTable.getSelectedRow(); 
        //βρισκω το ονομα της επιλεγμενης Movie
        selectedMovieNameFromjTable = (String) searchedMoviesjTable.getValueAt(choosedRow, choosedColumn);  
        
        //βρισκω την Movie απο το ονομα της Movie που εχει επιλεξει ο χρηστης
        try {
            movieFromSelectedMovieNameFromjTable = DBUtils.getMovieEntityFromMovieName(selectedMovieNameFromjTable);
        }catch(Exception ex){
            Logger.getLogger(MovieSearchFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //αν η Movie που επελεξε ο χρηστης ανηκει σε καποια FavoriteList,
        //δημιουργω αντικειμενο τυπου FavoriteList βασει της FavoriteList που ανηκει η ταινια που επελεξε ο χρηστης,
        //και εμφανιση της FavoriteList που ανηκει στο ComboBox με τις λιστες
        if(movieFromSelectedMovieNameFromjTable.getFavoriteListIdFk()!=null){
            favoriteListOfChoosedMovie = movieFromSelectedMovieNameFromjTable.getFavoriteListIdFk();        
            AddToListComboBox.setSelectedItem(favoriteListOfChoosedMovie.getFavoriteListName());
            counterToChangeMovieListProperly=1;
        }
        //αν η Movie που επελεξε ο χρηστης δεν ανηκει σε καποια FavoriteList,
        //βαζω την σημαια που ειναι υπευθυνη για την προσθηκη της Movie στην FavoriteList false,
        //και το ComboBox με τις FavoriteList δεν δειχνει καποια FavoriteList
        else{
            AddToListComboBox.setSelectedIndex(-1);         //η λίστα με τις FavorietLists δεν έχει προεπιλογή
            counterToChangeMovieListProperly=0;
        }
        
    }//GEN-LAST:event_searchedMoviesjTableMouseClicked

    private void AddToListComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_AddToListComboBoxItemStateChanged
        // TODO add your handling code here:
        //αν εχει επιλεγει καποια Movie τοτε μπορει αυτη η Movie να προστεθει σε FavorietList
        if(movieFromComboBoxChoosed == true){
            //αν η Movie δεν ανηκει σε καποια FavorietList ηδη
            if(movieFromSelectedMovieNameFromjTable.getFavoriteListIdFk()==null){
                counterToChangeMovieListProperly++;
                if(counterToChangeMovieListProperly==1){
                    int confirm = JOptionPane.showOptionDialog(null, "Insert selected movie to the selected list?", "Confirmation", 
                    JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);
                    if (confirm==0){
                        //επιλογη FavorietList απο τον χρηστη
                        selectedListNameFromjComboBox = (String) AddToListComboBox.getSelectedItem();       
                        //δημιουργια αντικειμενου τυπου FavorietList βασει επιλογης χρηστη
                        try {
                        favoriteListFromSelectedListNameFromComboBox = DBUtils.getFavoriteListEtityFromFavoriteListName(selectedListNameFromjComboBox);
                        } catch (Exception ex) {
                            Logger.getLogger(MovieSearchFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                
                        //δημιουργια νεας Movie με τα ιδια στοιχεια με αυτη που εχει επιλεξει αυτη ο χρηστης,
                        //και την FavoriteList που εχει επιλεξει ο χρηστης να ανηκει
                        Movie newMovie = new Movie();
                        newMovie.setMovieId(movieFromSelectedMovieNameFromjTable.getMovieId());
                        newMovie.setMovieName(movieFromSelectedMovieNameFromjTable.getMovieName());
                        newMovie.setMovieOverview(movieFromSelectedMovieNameFromjTable.getMovieOverview());
                        newMovie.setMovieRating(movieFromSelectedMovieNameFromjTable.getMovieRating());
                        newMovie.setMovieReleaseDate(movieFromSelectedMovieNameFromjTable.getMovieReleaseDate());
                        newMovie.setGenreIdFk(movieFromSelectedMovieNameFromjTable.getGenreIdFk());
                        newMovie.setFavoriteListIdFk(favoriteListFromSelectedListNameFromComboBox);
                
                        //προσθετω στην επιλεγμενη FavoriteList την Movie που εχει επιλεξει ο χρηστης
                        favoriteListFromSelectedListNameFromComboBox.addMovie(newMovie);
                
                        em.getTransaction().begin();
                        em.merge(newMovie);                     //συγχωνευση αλλαγων και περασμα στην βαση
                        em.getTransaction().commit();
                    }
                    counterToChangeMovieListProperly=-1;
                }
            }
            //αν η Movie ανηκει σε καποια FavoriteList
            if(movieFromSelectedMovieNameFromjTable.getFavoriteListIdFk()!=null){
                counterToChangeMovieListProperly++;
                if(counterToChangeMovieListProperly==2){
                    int confirm = JOptionPane.showOptionDialog(null, "Insert selected movie to the selected list?", "Confirmation", 
                    JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);
                    if (confirm==0){
                        //επιλογη FavoriteList απο τον χρηστη
                        selectedListNameFromjComboBox = (String) AddToListComboBox.getSelectedItem();       
                        //δημιουργια αντικειμενου τυπου FavoriteList βασει επιλογης χρηστη
                        try {
                        favoriteListFromSelectedListNameFromComboBox = DBUtils.getFavoriteListEtityFromFavoriteListName(selectedListNameFromjComboBox);
                        } catch (Exception ex) {
                            Logger.getLogger(MovieSearchFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                
                        //δημιουργια νεας Movie με τα ιδια στοιχεια με αυτη που εχει επιλεξει αυτη ο χρηστης,
                        //και την FavoriteList που εχει επιλεξει ο χρηστης να ανηκει
                        Movie newMovie = new Movie();
                        newMovie.setMovieId(movieFromSelectedMovieNameFromjTable.getMovieId());
                        newMovie.setMovieName(movieFromSelectedMovieNameFromjTable.getMovieName());
                        newMovie.setMovieOverview(movieFromSelectedMovieNameFromjTable.getMovieOverview());
                        newMovie.setMovieRating(movieFromSelectedMovieNameFromjTable.getMovieRating());
                        newMovie.setMovieReleaseDate(movieFromSelectedMovieNameFromjTable.getMovieReleaseDate());
                        newMovie.setGenreIdFk(movieFromSelectedMovieNameFromjTable.getGenreIdFk());
                        newMovie.setFavoriteListIdFk(favoriteListFromSelectedListNameFromComboBox);
                
                        //προσθετω στην επιλεγμενη FavoriteList την Movie που εχει επιλεξει ο χρηστης
                        favoriteListFromSelectedListNameFromComboBox.addMovie(newMovie);
                
                        em.getTransaction().begin();
                        em.merge(newMovie);                     //συγχωνευση αλλαγων και περασμα στην βαση
                        em.getTransaction().commit();
                    }
                    counterToChangeMovieListProperly=0;
                }
            }
        }
    }//GEN-LAST:event_AddToListComboBoxItemStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> AddToListComboBox;
    private javax.swing.JLabel AddToListLabel;
    private javax.swing.JButton ClearCriteriaButton;
    private javax.swing.JButton DeleteFromListButton;
    private javax.swing.JMenuItem ExitMenuItem;
    private javax.swing.JMenuItem FavouriteListManagementMenuItem;
    private javax.swing.JMenuItem InitialScreeenMenuItem;
    private javax.swing.JComboBox<String> MovieKindComboBox;
    private javax.swing.JTextField ReleaseDateTextField;
    private javax.swing.JPanel SeachResultsTableJPanel;
    private javax.swing.JButton SearchButton;
    private javax.swing.JPanel SearchMovieCriteriaJPanel;
    private javax.swing.JMenuItem StatiticsMenuItem;
    private java.util.List<model.FavoriteList> favoriteListList;
    private javax.persistence.Query favoriteListQuery;
    private java.util.List<model.Genre> genreList;
    private java.util.List<model.Genre> genreList1;
    private javax.persistence.Query genreQuery;
    private javax.persistence.Query genreQuery1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.persistence.EntityManager myMovies_newPUEntityManager;
    private javax.swing.JTable searchedMoviesjTable;
    // End of variables declaration//GEN-END:variables
}
