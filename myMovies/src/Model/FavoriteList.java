package model;

import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import java.io.Serializable;
import java.util.List;
import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlTransient;


@Entity
@Table(name = "FAVORITE_LIST")
@XmlRootElement
@NamedQueries({
    @NamedQuery(name = "FavoriteList.findAll", query = "SELECT f FROM FavoriteList f")
    , @NamedQuery(name = "FavoriteList.findByFavoriteListId", query = "SELECT f FROM FavoriteList f WHERE f.favoriteListId = :favoriteListId")
    , @NamedQuery(name = "FavoriteList.findByFavoriteListName", query = "SELECT f FROM FavoriteList f WHERE f.favoriteListName = :favoriteListName")})
public class FavoriteList implements Serializable {

    @Transient
    private PropertyChangeSupport changeSupport = new PropertyChangeSupport(this);

    private static final long serialVersionUID = 1L;
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Basic(optional = false)
    @Column(name = "FAVORITE_LIST_ID")
    private Integer favoriteListId;
    @Basic(optional = false)
    @Column(name = "FAVORITE_LIST_NAME")
    private String favoriteListName;
    @OneToMany(mappedBy = "favoriteListIdFk")
    private List<Movie> movieList;

    public FavoriteList() {
    }

    public FavoriteList(Integer favoriteListId) {
        this.favoriteListId = favoriteListId;
    }

    public FavoriteList(Integer favoriteListId, String favoriteListName) {
        this.favoriteListId = favoriteListId;
        this.favoriteListName = favoriteListName;
    }
    
    public Integer getFavoriteListId() {
        return favoriteListId;
    }

    public void setFavoriteListId(Integer favoriteListId) {
        Integer oldFavoriteListId = this.favoriteListId;
        this.favoriteListId = favoriteListId;
        changeSupport.firePropertyChange("favoriteListId", oldFavoriteListId, favoriteListId);
    }

    public String getFavoriteListName() {
        return favoriteListName;
    }

    public void setFavoriteListName(String favoriteListName) {
        String oldFavoriteListName = this.favoriteListName;
        this.favoriteListName = favoriteListName;
        changeSupport.firePropertyChange("favoriteListName", oldFavoriteListName, favoriteListName);
    }

    @XmlTransient
    public List<Movie> getMovieList() {
        return movieList;
    }

    public void setMovieList(List<Movie> movieList) {
        this.movieList = movieList;
    }

    @Override
    public int hashCode() {
        int hash = 0;
        hash += (favoriteListId != null ? favoriteListId.hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object object) {
        // TODO: Warning - this method won't work in the case the id fields are not set
        if (!(object instanceof FavoriteList)) {
            return false;
        }
        FavoriteList other = (FavoriteList) object;
        if ((this.favoriteListId == null && other.favoriteListId != null) || (this.favoriteListId != null && !this.favoriteListId.equals(other.favoriteListId))) {
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        return "model.FavoriteList[ favoriteListId=" + favoriteListId + " ]";
    }

    public void addPropertyChangeListener(PropertyChangeListener listener) {
        changeSupport.addPropertyChangeListener(listener);
    }

    public void removePropertyChangeListener(PropertyChangeListener listener) {
        changeSupport.removePropertyChangeListener(listener);
    }
    
    
    
    //***************** OUR CODE ************************//
    
    //Constructor μονο με το ονομα καθως το ID ειναι AutoGenerated
    public FavoriteList(String favoriteListName) {
        this.favoriteListName = favoriteListName;
    }
    
    //Προσθηκη ταινιας στην λιστα με τις ταινιες
    public void addMovie(Movie movie){
        movieList.add(movie);
    }
    
    //Αφαιρεση ταινιας απο την λιστας με τις ταινιες
    public void removeMovie(Movie movie){
            movieList.remove(movie);
    }
    
    //Ευρεση ταινιας με το καλυτερο rating
    public Movie getMaxRatingMovie(){
        Movie movieWithMaxRating = new Movie();
        //αν υπαρχουν ταινιες μεσα στην λιστα βρισκει αυτη με το καλυτερο rating αλλιως επιστρεφει ενα κενο αντικειμενο ταινιας
        if(!movieList.isEmpty()){
            movieWithMaxRating = movieList.get(0);  //βαζω να ειναι καλυτερη ταινια η πρωτη καθε λιστας
        
            //ελεγχω καθε ταινια της λιστας απο την δευτερη θεση και μετα αν εχει καλυτερο rating απο την πρωτη και αποθηκευω την καλυτερη ταινια
            for(int i=1;i<movieList.size();i++){
                if(movieWithMaxRating.getMovieRating()< movieList.get(i).getMovieRating()){
                    movieWithMaxRating = movieList.get(i);
                }
            }
        }
        return movieWithMaxRating;
    }
    //***************** END OF OUR CODE ************************//
    
}
